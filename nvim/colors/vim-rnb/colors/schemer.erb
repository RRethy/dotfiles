<%
    # RNB, A VIM COLORSCHEME TEMPLATE
    # Author:        Romain Lafourcade (https://github.com/romainl)
    # Canonical URL: https://github.com/romainl/vim-rnb

    # This template is designed to help vimmers create their own colorschemes
    # without much effort.
    #
    # You will need Ruby to generate your colorscheme but Ruby knowledge is
    # not needed at all.
    #
    # The process is divided in five steps:
    #   1. rename `colors/rnb.erb` to `colors/name_of_your_colorscheme.erb`,
    #   2. start by editing your colorscheme's information,
    #   3. define your colors,
    #   4. define your highlight groups and links,
    #   5. and generate your colorscheme.

    # Step 2: information
    #
    # Make sure the name of your colorscheme is unique and attractive.
    # The description should fit in a single line with no linefeed.
    # 'background' can be "light" or "dark".
    information = {
        author:      "Adam P. Regasz-Rethy",
        email:       "rethy.spud@gmail.com",
        name:        "schemer",
        description: "The colorscheme used by rrethy",
        background:  "dark",
        webpage:     "https://github.com/rrethy"
    }

    # Step 3: colors
    #
    # black = [       give each color a distinctive name
    #   "#000000",    hexadecimal color used in GVim/MacVim or "NONE"
    #   0,            integer between 0 and 255 used by terminals supporting 256 colors
    #                 or "NONE"
    #   "black"       color name used by less capable color terminals, can be "darkred",
    #                 "red", "darkgreen", "green", "darkyellow", "yellow", "darkblue",
    #                 "blue", "darkmagenta", "magenta", "black", "darkgrey", "grey",
    #                 "white", or "NONE"
    # ]
    #
    # If your colors are defined correctly, the resulting colorscheme is guaranteed
    # to work in GVim (Windows/Linux), MacVim, and any properly set up terminal emulator.
    #
    # The colors below are the first 16 colors of the xterm palette. They
    # are only here as an example, though. You can get rid of them, I won't be mad.
    black       = ["#1e2127", 0, "black"]
    darkred     = ["#be5046", 1, "darkred"]
    darkgreen   = ["#008000", 2, "darkgreen"]
    darkyellow  = ["#d19965", 3, "darkyellow"]
    darkblue    = ["#528bff", 4, "darkblue"]
    darkmagenta = ["#d55fde", 5, "darkmagenta"]
    darkcyan    = ["#00ACC1", 6, "darkcyan"]
    gray        = ["#515e77", 7, "gray"]
    darkgray    = ["#2c313c", 8, "darkgray"]
    red         = ["#e06c75", 9, "red"]
    green       = ["#89ca78", 10, "green"]
    yellow      = ["#e4bf7a", 11, "yellow"]
    blue        = ["#61afef", 12, "blue"]
    magenta     = ["#c578dd", 13, "magenta"]
    cyan        = ["#56b5c2", 14, "cyan"]
    white       = ["#abb2bf", 15, "white"]

    # Step 4: highlights
    #
    # You can define highlight groups like this:
    #
    #   [ "Normal",       name of the highlight group
    #     white,          the color used for background color, or use "NONE", "fg" or "bg"
    #     darkgray,       the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "NONE"          style, can be "bold", "underline", "reverse", "italic",
    #                     "standout", "NONE" or "undercurl"
    #   ]
    #
    # The sample above tells Vim to render normal text in dark gray against a white
    # background, without any styling.
    #
    # or link an highlight group to another:
    #
    #   [ "Title", "Normal" ]
    #
    # In GUI Vim, there is an additional color for the undercurl used to
    # highlight spelling mistakes:
    #
    #   [ "SpellBad",     name of the highlight group
    #     "NONE",         the color used for background color, or use "NONE", "fg" or "bg"
    #     red,            the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "undercurl",    style
    #     red             color used for the undercurl
    #   ]
    #
    # The sample above tells Vim to render badly spelled words in red against the current
    # background, with a red undercurl.
    #
    # You can add any custom highlight group to the standard list below but you shouldn't
    # remove any if you want a working colorscheme.
    highlights = [
        [ "Normal", black, white, "NONE" ],
        [ "NonText", black, gray, "bold" ],
        [ "Comment", "NONE", gray, "italic" ],
        [ "Constant", "NONE", darkyellow, "NONE" ],
        [ "Error", darkred, "NONE", "bold" ],
        [ "Identifier", "NONE", red, "NONE" ],
        [ "Conceal", "bg", "fg", "NONE" ],
        [ "Ignore", "Conceal" ],
        [ "PreProc", "NONE", yellow, "NONE" ],
        [ "Special", "NONE", darkcyan, "NONE" ],
        [ "Statement", "NONE", magenta, "NONE" ],
        [ "String", "NONE", green, "NONE" ],
        [ "Number", "Constant" ],
        [ "Todo", "NONE", cyan, "bold" ],
        [ "Type", "NONE", magenta, "NONE" ],
        [ "Underlined", "NONE", "NONE", "bold,underline" ],
        [ "StatusLine", darkgray, "NONE", "NONE" ],
        [ "StatusLineNC", "NONE", darkgray, "NONE" ],
        [ "StatusLineTerm", "StatusLine" ],
        [ "StatusLineTermNC", "StatusLineNC" ],
        [ "VertSplit", "NONE", white, "NONE" ],
        [ "TabLine", darkgray, "NONE", "NONE" ],
        [ "TabLineFill", "NONE", "NONE", "NONE" ],
        [ "TabLineSel", white, black, "NONE" ],
        [ "Title", "NONE", magenta, "bold" ],
        [ "CursorLine", darkgray, "NONE", "NONE" ],
        [ "ColorColumn", darkgray, "NONE", "NONE" ],
        [ "CursorColumn", darkgray, "NONE", "NONE" ],
        [ "LineNr", "NONE", gray, "NONE" ],
        [ "CursorLineNr", darkgray, darkblue, "bold" ],
        [ "Cursor", "NONE", "NONE", "NONE" ],
        [ "helpLeadBlank", white, darkgray, "NONE" ],
        [ "helpNormal", white, darkgray, "NONE" ],
        [ "Visual", darkgray, "NONE", "NONE" ],
        [ "VisualNOS", "CursorLine" ],
        [ "Pmenu", darkcyan, "bg", "NONE" ],
        [ "PmenuSbar", darkcyan, magenta, "NONE" ],
        [ "PmenuSel", cyan, "bg", "bold" ],
        [ "PmenuThumb", darkred, "NONE", "NONE" ],
        [ "FoldColumn", "LineNr" ],
        [ "Folded", darkgray, white, "NONE" ],
        [ "WildMenu", white, darkgray, "NONE" ],
        [ "SpecialKey", white, darkgray, "NONE" ],
        [ "DiffAdd", green, "NONE", "NONE" ],
        [ "DiffChange", yellow, "NONE", "NONE" ],
        [ "DiffDelete", red, "NONE", "NONE" ],
        [ "DiffText", magenta, "NONE", "NONE" ],
        [ "IncSearch", darkmagenta, "bg", "NONE" ],
        [ "Search", blue, "bg", "NONE" ],
        [ "Directory", "NONE", cyan, "bold" ],
        [ "MatchParen", "NONE", darkblue, "bold,underline" ],
        [ "SpellBad", "NONE", darkred, "bold,underline" ],
        [ "SpellCap", "NONE", red, "bold" ],
        [ "SpellLocal", "NONE", "NONE", "NONE" ],
        [ "SpellRare", "NONE", yellow, "NONE" ],
        [ "SignColumn", "NONE", "bg", "NONE" ],
        [ "ErrorMsg", darkred, black, "bold" ],
        [ "ModeMsg", "NONE", cyan, "underline" ],
        [ "MoreMsg", "NONE", darkblue, "bold" ],
        [ "Question", "NONE", darkblue, "bold" ],
        [ "WarningMsg", "Error" ],
        [ "QuickFixLine", "CursorLine" ]
    ]

    # Define the color palette used by :terminal when in GUI Vim
    # or in TUI Vim when 'termguicolors' is enabled. If this list
    # is empty or if it doesn't contain exactly 16 items, the corresponding
    # Vim variable won't be set.
    #
    # The expected values are colors defined in step 2.
    terminal_ansi_colors = [
        black,
        darkred,
        darkgreen,
        darkyellow,
        darkblue,
        darkmagenta,
        darkcyan,
        gray,
        darkgray,
        red,
        green,
        yellow,
        blue,
        magenta,
        cyan,
        white
    ]

    # Step 5: generation
    #
    # From a separate shell:
    #
    #     $ erb -T - bar.erb > bar.vim
    #
    # From a separate shell, with the make program:
    #
    #     $ make
    #
    # From Vim:
    #
    #     :!erb -T - % > %<.vim

    # These online resources can help you design your colorscheme:
    #
    #   * http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
    #         the xterm palette
    #   * http://whatcolor.herokuapp.com/
    #         play with hexadecimal colors right in the address bar (currently down)
    #   * http://color.hailpixel.com/
    #         similar concept, fuzzier implementation
    #   * http://colourco.de/
    #         similar concept, fancier implementation
    #   * http://www.colr.org/
    #         extract a palette from an image
    #   * http://colores.manugarri.com/
    #         search for 'word', get images and color palettes
    #   * http://www.colourlovers.com/palettes
    #         user-created palettes
    #   * http://www.perbang.dk/color+scheme/
    #         a no-nonsense colorscheme generator
    #   * https://color.adobe.com/
    #         Adobe's fancy colorscheme generator
    #   * http://paletton.com/
    #         The classic 'Color Scheme Designer', rebranded
    #   * http://vrl.cs.brown.edu/color
    #         A very smart palette generator
    #   * https://cmcenroe.me/2018/04/03/colour-scheme.html
    #         "I Made My Own Colour Scheme and You Can Too!"

    # A few general advices:
    #
    #   * The Windows console is limited to the 16 so-called "ANSI" colors but it has
    #     a few of them interverted which makes numbers impractical. Use color names
    #     instead of numbers: :help cterm-colors
    #   * The Windows console (yeahâ€¦) doesn't do italics, underlines or bolded text;
    #     it is limited to normal and reverse. Keep that in mind if you want
    #     your colorscheme to be usable in as many environments as possible by as many
    #     people as possible.
    #   * All of the terminal emulators in use these days allow their users to
    #     change the 16 so-called "ANSI" colors. It is also possible on some platforms
    #     to change some or all of the 256 colors in the xterm palette. Don't take
    #     anything for granted.
    #   * When used against a light background, strong colors work better than muted
    #     ones. Light or dark doesn't really matters. Also, it is harder to discriminate
    #     between two similar colors on a light background.
    #   * Both strong and muted colors work well against a dark background. It is also
    #     easier to work with similar colors, but dark colors don't work at all.
    #   * Use as many text samples as possible. String-heavy languages may look completely
    #     different than keyword-heavy ones. This can have an impact on the usability
    #     of your colorscheme.
    #   * Most terminal emulators and terminal multiplexers currently in use on unix-like
    #     systems support 256 colors but they almost always default to a '$TERM' that tells
    #     Vim otherwise. Your users will need to make sure their terminal emulator/multiplexer
    #     is correctly set up if they want to enjoy the best possible experience.

    # Many thanks to Barry Arthur (https://github.com/dahu) for the original idea.

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Webpage:     <%= information[:webpage] %>
" Description: <%= information[:description] %>

hi clear

if exists('syntax_on')
  syntax reset
endif

let colors_name = '<%= information[:name].downcase %>'

if has('termguicolors')
	set termguicolors
endif

if ($TERM =~# '256' || &t_Co >= 256) || has('gui_running')
<% for highlight in highlights -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% if highlight[0] == "Normal" -%>
<%= '' %>
    set background=<%= information[:background] %>
<%= '' %>
<% end -%>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% for highlight in highlights -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% if highlight[0] == "Normal" -%>
<%= '' %>
    set background=<%= information[:background] %>
<%= '' %>
<% end -%>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% for link in links -%>
hi link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
if has('nvim')
<%= '' %>
<% terminal_ansi_colors.each_with_index do |colour, index| -%>
    let g:terminal_color_<%= index -%> = '<%= colour[0] -%>'
<% end -%>
<%= '' %>
else
<%= '' %>
    let g:terminal_ansi_colors = [
    <% for color in terminal_ansi_colors -%>
        \ '<%= color[0] %>',
    <% end -%>
        \ ]
    <% end -%>
<%= '' %>
endif

hi SilentStatusline     guifg=#A9B7C6 guibg=#2c323c
hi SpySl                guifg=#1e2127 guibg=#A9B7C6
hi SpySlInv             guifg=#A9B7C6 guibg=#818E9C
hi LeftPrompt           guifg=#1e2127 guibg=#818E9C
hi LeftPromptInv        guifg=#818E9C guibg=#657281
hi GitPrompt            guifg=#1e2127 guibg=#657281
hi GitPromptInv         guifg=#657281 guibg=#e06c75
hi RightPrompt          guifg=#1e2127 guibg=#A9B7C6
hi RightPromptInv       guifg=#A9B7C6 guibg=#2c323c
hi AlePromptErrors      guifg=#2c313c guibg=#e06c75
hi AlePromptErrorsInv   guifg=#e06c75 guibg=#d19965
hi AlePromptWarnings    guifg=#2c313c guibg=#d19965
hi AlePromptWarningsInv guifg=#d19965 guibg=#2c323c

hi SilentStatuslineNC  guifg=#A9B7C6 guibg=#2c323c
hi SpySlNC             guifg=#1e2127 guibg=#818E9C
hi SpySlInvNC          guifg=#818E9C guibg=#657281
hi LeftPromptNC        guifg=#1e2127 guibg=#657281
hi LeftPromptInvNC     guifg=#657281 guibg=#2c323c
hi RightPromptNC       guifg=#1e2127 guibg=#818E9C
hi RightPromptInvNC    guifg=#818E9C guibg=#2c323c

" Generated with RNB (https://github.com/romainl/vim-rnb)
