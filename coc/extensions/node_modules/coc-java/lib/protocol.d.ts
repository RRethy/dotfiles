import { RequestType, Command, NotificationType, TextDocumentIdentifier, ExecuteCommandParams } from 'vscode-languageserver-protocol';
/**
 * The message type. Copied from vscode protocol
 */
export declare enum MessageType {
    /**
     * An error message.
     */
    Error = 1,
    /**
     * A warning message.
     */
    Warning = 2,
    /**
     * An information message.
     */
    Info = 3,
    /**
     * A log message.
     */
    Log = 4
}
/**
 * A functionality status
 */
export declare enum FeatureStatus {
    /**
     * Disabled.
     */
    disabled = 0,
    /**
     * Enabled manually.
     */
    interactive = 1,
    /**
     * Enabled automatically.
     */
    automatic = 2
}
export declare enum CompileWorkspaceStatus {
    FAILED = 0,
    SUCCEED = 1,
    WITHERROR = 2,
    CANCELLED = 3
}
export interface StatusReport {
    message: string;
    type: string;
}
export interface ProgressReport {
    id: string;
    task: string;
    subTask: string;
    status: string;
    workDone: number;
    totalWork: number;
    complete: boolean;
}
export interface ActionableMessage {
    severity: MessageType;
    message: string;
    data?: any;
    commands?: Command[];
}
export declare namespace StatusNotification {
    const type: NotificationType<StatusReport, void>;
}
export declare namespace ProgressReportNotification {
    const type: NotificationType<ProgressReport, void>;
}
export declare namespace ClassFileContentsRequest {
    const type: RequestType<TextDocumentIdentifier, string, void, void>;
}
export declare namespace ProjectConfigurationUpdateRequest {
    const type: NotificationType<TextDocumentIdentifier, void>;
}
export declare namespace ActionableNotification {
    const type: NotificationType<ActionableMessage, void>;
}
export declare namespace CompileWorkspaceRequest {
    const type: RequestType<boolean, CompileWorkspaceStatus, void, void>;
}
export declare namespace ExecuteClientCommandRequest {
    const type: RequestType<ExecuteCommandParams, any, void, void>;
}
export declare namespace SendNotificationRequest {
    const type: RequestType<ExecuteCommandParams, any, void, void>;
}
