"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const fs_2 = require("./fs");
const coc_nvim_1 = require("coc.nvim");
const api_1 = tslib_1.__importDefault(require("./api"));
class TypeScriptVersion {
    constructor(path, _pathLabel) {
        this.path = path;
        this._pathLabel = _pathLabel;
        this._api = null;
    }
    get tsServerPath() {
        return path_1.default.join(this.path, 'tsserver.js');
    }
    get pathLabel() {
        return typeof this._pathLabel === 'undefined' ? this.path : this._pathLabel;
    }
    get isValid() {
        return this.version != null;
    }
    get version() {
        if (this._api)
            return this._api;
        let api = this._api = this.getTypeScriptVersion(this.tsServerPath);
        return api;
    }
    get versionString() {
        const version = this.version;
        return version ? version.versionString : null;
    }
    getTypeScriptVersion(serverPath) {
        if (!fs_1.default.existsSync(serverPath)) {
            return undefined;
        }
        const p = serverPath.split(path_1.default.sep);
        if (p.length <= 2) {
            return undefined;
        }
        const p2 = p.slice(0, -2);
        const modulePath = p2.join(path_1.default.sep);
        let fileName = path_1.default.join(modulePath, 'package.json');
        if (!fs_1.default.existsSync(fileName)) {
            // Special case for ts dev versions
            if (path_1.default.basename(modulePath) === 'built') {
                fileName = path_1.default.join(modulePath, '..', 'package.json');
            }
        }
        if (!fs_1.default.existsSync(fileName)) {
            return undefined;
        }
        const contents = fs_1.default.readFileSync(fileName).toString();
        let desc = null;
        try {
            desc = JSON.parse(contents);
        }
        catch (err) {
            return undefined;
        }
        if (!desc || !desc.version) {
            return undefined;
        }
        return desc.version ? api_1.default.fromVersionString(desc.version) : undefined;
    }
}
exports.TypeScriptVersion = TypeScriptVersion;
class TypeScriptVersionProvider {
    constructor(configuration) {
        this.configuration = configuration;
    }
    updateConfiguration(configuration) {
        this.configuration = configuration;
    }
    getDefaultVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // tsdk from configuration
            let { globalTsdk } = this.configuration;
            if (globalTsdk)
                return new TypeScriptVersion(globalTsdk);
            return this.bundledVersion;
        });
    }
    get globalVersion() {
        let { globalTsdk } = this.configuration;
        if (globalTsdk)
            return new TypeScriptVersion(globalTsdk);
        return undefined;
    }
    getLocalVersion(root) {
        let paths = fs_2.getParentDirs(root);
        paths.unshift(root);
        for (let p of paths) {
            if (fs_1.default.existsSync(path_1.default.join(p, 'node_modules'))) {
                let lib = path_1.default.join(p, 'node_modules/typescript/lib');
                return new TypeScriptVersion(lib);
            }
        }
        return null;
    }
    get bundledVersion() {
        const file = require.resolve('typescript');
        if (!file || !fs_1.default.existsSync(file)) {
            coc_nvim_1.workspace.showMessage('Bundled typescript module not found', 'error');
            return null;
        }
        const bundledVersion = new TypeScriptVersion(path_1.default.dirname(file), '');
        return bundledVersion;
    }
}
exports.TypeScriptVersionProvider = TypeScriptVersionProvider;
//# sourceMappingURL=versionProvider.js.map