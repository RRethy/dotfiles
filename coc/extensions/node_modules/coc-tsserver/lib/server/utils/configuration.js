"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const which_1 = tslib_1.__importDefault(require("which"));
var TsServerLogLevel;
(function (TsServerLogLevel) {
    TsServerLogLevel[TsServerLogLevel["Off"] = 0] = "Off";
    TsServerLogLevel[TsServerLogLevel["Normal"] = 1] = "Normal";
    TsServerLogLevel[TsServerLogLevel["Terse"] = 2] = "Terse";
    TsServerLogLevel[TsServerLogLevel["Verbose"] = 3] = "Verbose";
})(TsServerLogLevel = exports.TsServerLogLevel || (exports.TsServerLogLevel = {}));
(function (TsServerLogLevel) {
    function fromString(value) {
        switch (value && value.toLowerCase()) {
            case 'normal':
                return TsServerLogLevel.Normal;
            case 'terse':
                return TsServerLogLevel.Terse;
            case 'verbose':
                return TsServerLogLevel.Verbose;
            case 'off':
            default:
                return TsServerLogLevel.Off;
        }
    }
    TsServerLogLevel.fromString = fromString;
    function toString(value) {
        switch (value) {
            case TsServerLogLevel.Normal:
                return 'normal';
            case TsServerLogLevel.Terse:
                return 'terse';
            case TsServerLogLevel.Verbose:
                return 'verbose';
            case TsServerLogLevel.Off:
            default:
                return 'off';
        }
    }
    TsServerLogLevel.toString = toString;
})(TsServerLogLevel = exports.TsServerLogLevel || (exports.TsServerLogLevel = {}));
class TypeScriptServiceConfiguration {
    constructor() {
        this._configuration = coc_nvim_1.workspace.getConfiguration('tsserver');
        coc_nvim_1.workspace.onDidChangeConfiguration(() => {
            this._configuration = coc_nvim_1.workspace.getConfiguration('tsserver');
        });
    }
    get locale() {
        return this._configuration.get('locale', null);
    }
    get globalTsdk() {
        return this._configuration.get('tsdk', null);
    }
    get tsServerLogLevel() {
        return TsServerLogLevel.fromString(this._configuration.get('log', null));
    }
    get typingsCacheLocation() {
        return this._configuration.get('typingsCacheLocation', '');
    }
    get tsServerPluginNames() {
        return this._configuration.get('pluginNames', []);
    }
    get tsServerPluginRoot() {
        return this._configuration.get('tsServerPluginRoot', null);
    }
    get checkJs() {
        return this._configuration.get('implicitProjectConfig.checkJs', false);
    }
    get experimentalDecorators() {
        return this._configuration.get('implicitProjectConfig.experimentalDecorators', false);
    }
    get disableAutomaticTypeAcquisition() {
        return this._configuration.get('disableAutomaticTypeAcquisition', false);
    }
    get formatOnType() {
        return this._configuration.get('formatOnType', false);
    }
    get debugPort() {
        return this._configuration.get('debugPort', parseInt(process.env['TSS_DEBUG'], 10));
    }
    get npmLocation() {
        let path = this._configuration.get('npm', '');
        if (path)
            return path;
        try {
            path = which_1.default.sync('npm');
        }
        catch (e) {
            return null;
        }
        return path;
    }
    static loadFromWorkspace() {
        return new TypeScriptServiceConfiguration();
    }
}
exports.TypeScriptServiceConfiguration = TypeScriptServiceConfiguration;
//# sourceMappingURL=configuration.js.map