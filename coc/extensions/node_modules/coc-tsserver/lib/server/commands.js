"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
const coc_nvim_1 = require("coc.nvim");
class ReloadProjectsCommand {
    constructor(client) {
        this.client = client;
        this.id = 'tsserver.reloadProjects';
    }
    execute() {
        this.client.reloadProjects();
        coc_nvim_1.workspace.showMessage('projects reloaded');
    }
}
exports.ReloadProjectsCommand = ReloadProjectsCommand;
class OpenTsServerLogCommand {
    constructor(client) {
        this.client = client;
        this.id = 'tsserver.openTsServerLog';
    }
    execute() {
        this.client.serviceClient.openTsServerLogFile(); // tslint:disable-line
    }
}
exports.OpenTsServerLogCommand = OpenTsServerLogCommand;
class TypeScriptGoToProjectConfigCommand {
    constructor(client) {
        this.client = client;
        this.id = 'tsserver.goToProjectConfig';
    }
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let doc = yield coc_nvim_1.workspace.document;
            yield goToProjectConfig(this.client, doc.uri);
        });
    }
}
exports.TypeScriptGoToProjectConfigCommand = TypeScriptGoToProjectConfigCommand;
function goToProjectConfig(clientHost, uri) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!clientHost.handles(uri)) {
            coc_nvim_1.workspace.showMessage('Could not determine TypeScript or JavaScript project. Unsupported file type', 'warning');
            return;
        }
        const client = clientHost.serviceClient;
        const file = client.toPath(uri);
        let res;
        try {
            res = yield client.execute('projectInfo', { file, needFileNameList: false }, vscode_languageserver_protocol_1.CancellationToken.None);
        }
        catch (_a) {
            // noop
        }
        if (!res || !res.body) {
            coc_nvim_1.workspace.showMessage('Could not determine TypeScript or JavaScript project.', 'warning');
            return;
        }
        const { configFileName } = res.body;
        if (configFileName && !isImplicitProjectConfigFile(configFileName)) {
            yield coc_nvim_1.workspace.openResource(vscode_uri_1.default.file(configFileName).toString());
            return;
        }
        coc_nvim_1.workspace.showMessage('Config file not found', 'warning');
    });
}
function isImplicitProjectConfigFile(configFileName) {
    return configFileName.indexOf('/dev/null/') === 0;
}
//# sourceMappingURL=commands.js.map