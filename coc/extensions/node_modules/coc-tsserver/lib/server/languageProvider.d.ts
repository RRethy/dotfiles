import { Diagnostic } from 'vscode-languageserver-protocol';
import Uri from 'vscode-uri';
import { DiagnosticKind } from 'coc.nvim';
import FileConfigurationManager from './features/fileConfigurationManager';
import TypeScriptServiceClient from './typescriptServiceClient';
import { LanguageDescription } from './utils/languageDescription';
import TypingsStatus from './utils/typingsStatus';
export default class LanguageProvider {
    client: TypeScriptServiceClient;
    private description;
    private readonly diagnosticsManager;
    private readonly bufferSyncSupport;
    readonly fileConfigurationManager: FileConfigurationManager;
    private _validate;
    private _enableSuggestionDiagnostics;
    private readonly disposables;
    constructor(client: TypeScriptServiceClient, description: LanguageDescription, typingsStatus: TypingsStatus);
    dispose(): void;
    private configurationChanged;
    private registerProviders;
    handles(resource: Uri): boolean;
    private readonly id;
    readonly diagnosticSource: string;
    private updateValidate;
    private updateSuggestionDiagnostics;
    reInitialize(): void;
    triggerAllDiagnostics(): void;
    diagnosticsReceived(diagnosticsKind: DiagnosticKind, file: Uri, diagnostics: Diagnostic[]): void;
    configFileDiagnosticsReceived(uri: Uri, diagnostics: Diagnostic[]): void;
}
