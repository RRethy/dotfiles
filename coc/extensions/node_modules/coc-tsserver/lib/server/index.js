"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
const typescriptServiceClientHost_1 = tslib_1.__importDefault(require("./typescriptServiceClientHost"));
const languageDescription_1 = require("./utils/languageDescription");
function wait(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
class TsserverService {
    constructor() {
        this.id = 'tsserver';
        this.name = 'tsserver';
        this.state = coc_nvim_1.ServiceStat.Initial;
        this._onDidServiceReady = new vscode_languageserver_protocol_1.Emitter();
        this.onServiceReady = this._onDidServiceReady.event;
        this.disposables = [];
        this.descriptions = [];
        const config = coc_nvim_1.workspace.getConfiguration('tsserver');
        const enableJavascript = !!config.get('enableJavascript');
        this.enable = config.get('enable');
        this.descriptions = languageDescription_1.standardLanguageDescriptions.filter(o => {
            return enableJavascript ? true : o.id != 'javascript';
        });
        this.selector = this.descriptions.reduce((arr, c) => {
            return arr.concat(c.modeIds);
        }, []);
    }
    get config() {
        return coc_nvim_1.workspace.getConfiguration('tsserver');
    }
    start() {
        this.state = coc_nvim_1.ServiceStat.Starting;
        this.clientHost = new typescriptServiceClientHost_1.default(this.descriptions);
        this.disposables.push(this.clientHost);
        let client = this.clientHost.serviceClient;
        return new Promise(resolve => {
            let started = false;
            client.onTsServerStarted(() => {
                Object.defineProperty(this, 'state', {
                    get: () => {
                        return this.clientHost.serviceClient.state;
                    }
                });
                this._onDidServiceReady.fire(void 0);
                this.ensureConfiguration(); // tslint:disable-line
                if (!started) {
                    started = true;
                    resolve();
                }
            });
        });
    }
    ensureConfiguration() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.clientHost)
                return;
            let document = yield coc_nvim_1.workspace.document;
            yield wait(100);
            let uri = vscode_uri_1.default.parse(document.uri);
            let language = this.clientHost.findLanguage(uri);
            if (!language)
                return;
            yield language.fileConfigurationManager.ensureConfigurationForDocument(document.textDocument);
        });
    }
    dispose() {
        coc_nvim_1.disposeAll(this.disposables);
    }
    restart() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.clientHost)
                return;
            let client = this.clientHost.serviceClient;
            yield client.restartTsServer();
        });
    }
    stop() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.clientHost)
                return;
            this.clientHost.reset();
            let client = this.clientHost.serviceClient;
            yield client.stop();
            return;
        });
    }
}
exports.default = TsserverService;
//# sourceMappingURL=index.js.map