"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const api_1 = tslib_1.__importDefault(require("../utils/api"));
const languageIds = tslib_1.__importStar(require("../utils/languageModeIds"));
function objAreEqual(a, b) {
    let keys = Object.keys(a);
    for (let i = 0; i < keys.length; i++) { // tslint:disable-line
        let key = keys[i];
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
class FileConfigurationManager {
    constructor(client) {
        this.client = client;
        this.cachedOption = null;
        this.requesting = false;
    }
    ensureConfigurationOptions(languageId, insertSpaces, tabSize) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let { requesting } = this;
            let options = {
                tabSize,
                insertSpaces
            };
            if (requesting || (this.cachedOption && objAreEqual(this.cachedOption, options)))
                return;
            const currentOptions = this.getFileOptions(options, languageId);
            this.requesting = true;
            const args = Object.assign({ hostInfo: 'nvim-coc' }, currentOptions);
            yield this.client.execute('configure', args);
            this.cachedOption = options;
            this.requesting = false;
        });
    }
    ensureConfigurationForDocument(document) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let opts = yield coc_nvim_1.workspace.getFormatOptions(document.uri);
            return this.ensureConfigurationOptions(document.languageId, opts.insertSpaces, opts.tabSize);
        });
    }
    reset() {
        this.cachedOption = null;
    }
    getLanguageConfiguration(languageId) {
        return coc_nvim_1.workspace.getConfiguration(languageId);
    }
    isTypeScriptDocument(languageId) {
        return languageId === languageIds.typescript || languageId === languageIds.typescriptreact ||
            languageId === languageIds.typescripttsx || languageId === languageIds.typescriptjsx;
    }
    enableJavascript() {
        const config = coc_nvim_1.workspace.getConfiguration('tsserver');
        return !!config.get('enableJavascript');
    }
    getFileOptions(options, languageId) {
        const lang = this.isTypeScriptDocument(languageId) ? 'typescript' : 'javascript';
        return {
            formatOptions: this.getFormatOptions(options, lang),
            preferences: this.getPreferences(lang)
        };
    }
    getFormatOptions(options, language) {
        const config = coc_nvim_1.workspace.getConfiguration(`${language}.format`);
        return {
            tabSize: options.tabSize,
            indentSize: options.tabSize,
            convertTabsToSpaces: options.insertSpaces,
            // We can use \n here since the editor normalizes later on to its line endings.
            newLineCharacter: '\n',
            insertSpaceAfterCommaDelimiter: config.get('insertSpaceAfterCommaDelimiter'),
            insertSpaceAfterConstructor: config.get('insertSpaceAfterConstructor'),
            insertSpaceAfterSemicolonInForStatements: config.get('insertSpaceAfterSemicolonInForStatements'),
            insertSpaceBeforeAndAfterBinaryOperators: config.get('insertSpaceBeforeAndAfterBinaryOperators'),
            insertSpaceAfterKeywordsInControlFlowStatements: config.get('insertSpaceAfterKeywordsInControlFlowStatements'),
            insertSpaceAfterFunctionKeywordForAnonymousFunctions: config.get('insertSpaceAfterFunctionKeywordForAnonymousFunctions'),
            insertSpaceBeforeFunctionParenthesis: config.get('insertSpaceBeforeFunctionParenthesis'),
            insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: config.get('insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis'),
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: config.get('insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets'),
            insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: config.get('insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces'),
            insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: config.get('insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces'),
            insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: config.get('insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces'),
            insertSpaceAfterTypeAssertion: config.get('insertSpaceAfterTypeAssertion'),
            placeOpenBraceOnNewLineForFunctions: config.get('placeOpenBraceOnNewLineForFunctions'),
            placeOpenBraceOnNewLineForControlBlocks: config.get('placeOpenBraceOnNewLineForControlBlocks')
        };
    }
    getCompleteOptions(languageId) {
        const lang = this.isTypeScriptDocument(languageId) ? 'typescript' : 'javascript';
        const config = coc_nvim_1.workspace.getConfiguration(`${lang}.suggest`);
        return {
            enabled: config.get('enabled', true),
            names: config.get('names', true),
            paths: config.get('paths', true),
            completeFunctionCalls: config.get('completeFunctionCalls', true),
            autoImports: config.get('autoImports', true)
        };
    }
    removeSemicolons(languageId) {
        const lang = this.isTypeScriptDocument(languageId) ? 'typescript' : 'javascript';
        const config = coc_nvim_1.workspace.getConfiguration(`${lang}.preferences`);
        return config.get('noSemicolons', false);
    }
    getPreferences(language) {
        if (!this.client.apiVersion.gte(api_1.default.v290)) {
            return {};
        }
        const config = coc_nvim_1.workspace.getConfiguration(`${language}`);
        return {
            disableSuggestions: !config.get('suggest.enabled', true),
            importModuleSpecifierPreference: getImportModuleSpecifier(config),
            quotePreference: config.get('preferences.quoteStyle', 'single'),
            allowTextChangesInNewFiles: true,
        };
    }
}
exports.default = FileConfigurationManager;
function getImportModuleSpecifier(config) {
    let val = config.get('preferences.importModuleSpecifier');
    switch (val) {
        case 'relative':
            return 'relative';
        case 'non-relative':
            return 'non-relative';
        default:
            return 'auto';
    }
}
//# sourceMappingURL=fileConfigurationManager.js.map