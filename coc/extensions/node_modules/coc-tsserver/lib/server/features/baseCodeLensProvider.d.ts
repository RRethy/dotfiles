import { CancellationToken, CodeLens, Event, Range, TextDocument } from 'vscode-languageserver-protocol';
import { CodeLensProvider } from 'coc.nvim/lib/provider';
import * as Proto from '../protocol';
import { ITypeScriptServiceClient } from '../typescriptService';
export declare class CachedNavTreeResponse {
    private response?;
    private version;
    private document;
    execute(document: TextDocument, f: () => Promise<Proto.NavTreeResponse>): Promise<Proto.NavTreeResponse>;
    private matches;
    private update;
}
export declare abstract class TypeScriptBaseCodeLensProvider implements CodeLensProvider {
    protected client: ITypeScriptServiceClient;
    private cachedResponse;
    private onDidChangeCodeLensesEmitter;
    constructor(client: ITypeScriptServiceClient, cachedResponse: CachedNavTreeResponse);
    readonly onDidChangeCodeLenses: Event<void>;
    provideCodeLenses(document: TextDocument, token: CancellationToken): Promise<CodeLens[]>;
    protected abstract extractSymbol(document: TextDocument, item: Proto.NavigationTree, parent: Proto.NavigationTree | null): Range | null;
    private walkNavTree;
    protected getSymbolRange(document: TextDocument, item: Proto.NavigationTree): Range | null;
}
