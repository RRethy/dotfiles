import { CancellationToken, CodeAction, CodeActionContext, Range, TextDocument } from 'vscode-languageserver-protocol';
import { CodeActionProvider, CodeActionProviderMetadata } from 'coc.nvim/lib/provider';
import { ITypeScriptServiceClient } from '../typescriptService';
import FormattingOptionsManager from './fileConfigurationManager';
export default class TypeScriptRefactorProvider implements CodeActionProvider {
    private readonly client;
    private readonly formattingOptionsManager;
    private static readonly extractFunctionKind;
    private static readonly extractConstantKind;
    private static readonly moveKind;
    constructor(client: ITypeScriptServiceClient, formattingOptionsManager: FormattingOptionsManager);
    static readonly metadata: CodeActionProviderMetadata;
    provideCodeActions(document: TextDocument, range: Range, context: CodeActionContext, token: CancellationToken): Promise<CodeAction[] | undefined>;
    private convertApplicableRefactors;
    private refactorActionToCodeAction;
    private shouldTrigger;
    private static getKind;
}
