"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const coc_nvim_1 = require("coc.nvim");
const typeConverters = tslib_1.__importStar(require("../utils/typeConverters"));
class TypeScriptFoldingProvider {
    constructor(client) {
        this.client = client;
    }
    provideFoldingRanges(document, _context, token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const file = this.client.toPath(document.uri);
            if (!file) {
                return;
            }
            const args = { file };
            const { body } = yield this.client.execute('getOutliningSpans', args, token);
            if (!body) {
                return;
            }
            return body
                .map(span => this.convertOutliningSpan(span, document))
                .filter(foldingRange => !!foldingRange);
        });
    }
    convertOutliningSpan(span, document) {
        const range = typeConverters.Range.fromTextSpan(span.textSpan);
        const kind = TypeScriptFoldingProvider.getFoldingRangeKind(span);
        // Workaround for #49904
        if (span.kind === 'comment') {
            let doc = coc_nvim_1.workspace.getDocument(document.uri);
            const line = doc.getline(range.start.line);
            if (line.match(/\/\/\s*#endregion/gi)) {
                return undefined;
            }
        }
        let { start, end } = range;
        return vscode_languageserver_types_1.FoldingRange.create(start.line, end.line, start.character, end.character, kind);
    }
    static getFoldingRangeKind(span) {
        switch (span.kind) {
            case 'comment':
            case 'region':
            case 'imports':
            case 'code':
                return span.kind;
            default:
                return undefined;
        }
    }
}
exports.default = TypeScriptFoldingProvider;
//# sourceMappingURL=folding.js.map