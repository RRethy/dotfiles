"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const languageIds = tslib_1.__importStar(require("../utils/languageModeIds"));
class ProjectErrorCommand {
    constructor(client) {
        this.client = client;
        this.id = 'tsserver.project_error';
    }
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let document = yield coc_nvim_1.workspace.document;
            if (languageIds[document.filetype] == null)
                return;
            let file = this.client.toPath(document.uri);
            const args = {
                file,
                delay: 20
            };
            const response = yield this.client.execute('geterrForProject', args);
            if (!response || !response.success) {
                return;
            }
            return;
        });
    }
}
class ProjectErrors {
    constructor(client, commandManager) {
        this.disposables = [];
        let cmd = new ProjectErrorCommand(client);
        commandManager.register(cmd);
        this.disposables.push(vscode_languageserver_protocol_1.Disposable.create(() => {
            commandManager.unregister(cmd.id);
        }));
    }
    dispose() {
        coc_nvim_1.disposeAll(this.disposables);
    }
}
exports.default = ProjectErrors;
//# sourceMappingURL=projectError.js.map