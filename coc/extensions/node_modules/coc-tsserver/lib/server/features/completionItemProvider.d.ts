import { CancellationToken, CompletionContext, CompletionItem, Position, TextDocument, CompletionList } from 'vscode-languageserver-protocol';
import { CompletionItemProvider } from 'coc.nvim/lib/provider';
import { ITypeScriptServiceClient } from '../typescriptService';
import TypingsStatus from '../utils/typingsStatus';
import FileConfigurationManager from './fileConfigurationManager';
export interface CommandItem {
    readonly id: string | string[];
    execute(...args: any[]): void | Promise<any>;
}
export default class TypeScriptCompletionItemProvider implements CompletionItemProvider {
    private readonly client;
    private readonly typingsStatus;
    private readonly fileConfigurationManager;
    static readonly triggerCharacters: string[];
    private completeOption;
    private noSemicolons;
    constructor(client: ITypeScriptServiceClient, typingsStatus: TypingsStatus, fileConfigurationManager: FileConfigurationManager, languageId: string);
    private setCompleteOption;
    /**
     * Get completionItems
     *
     * @public
     * @param {TextDocument} document
     * @param {Position} position
     * @param {CancellationToken} token
     * @param {string} triggerCharacter
     * @returns {Promise<CompletionItem[]>}
     */
    provideCompletionItems(document: TextDocument, position: Position, token: CancellationToken, context: CompletionContext): Promise<CompletionList | null>;
    private getTsTriggerCharacter;
    /**
     * Resolve complete item, could have documentation added
     *
     * @public
     * @param {CompletionItem} item
     * @param {CancellationToken} token
     * @returns {Promise<CompletionItem>}
     */
    resolveCompletionItem(item: CompletionItem, token: CancellationToken): Promise<CompletionItem>;
    private getCodeActions;
    private shouldTrigger;
    private getDocumentation;
    private createSnippetOfFunctionCall;
    private isValidFunctionCompletionContext;
}
