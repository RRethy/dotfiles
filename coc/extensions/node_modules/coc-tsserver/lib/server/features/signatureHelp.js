"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Previewer = tslib_1.__importStar(require("../utils/previewer"));
const typeConverters = tslib_1.__importStar(require("../utils/typeConverters"));
class TypeScriptSignatureHelpProvider {
    constructor(client) {
        this.client = client;
    }
    provideSignatureHelp(document, position, token) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filepath = this.client.toPath(document.uri);
            if (!filepath) {
                return undefined;
            }
            const args = typeConverters.Position.toFileLocationRequestArgs(filepath, position);
            let info;
            try {
                const response = yield this.client.execute('signatureHelp', args, token);
                info = response.body;
                if (!info)
                    return undefined;
            }
            catch (_a) {
                return undefined;
            }
            const result = {
                activeSignature: info.selectedItemIndex,
                activeParameter: this.getActiveParmeter(info),
                signatures: info.items.map(signature => {
                    return this.convertSignature(signature);
                })
            };
            return result;
        });
    }
    getActiveParmeter(info) {
        const activeSignature = info.items[info.selectedItemIndex];
        if (activeSignature && activeSignature.isVariadic) {
            return Math.min(info.argumentIndex, activeSignature.parameters.length - 1);
        }
        return info.argumentIndex;
    }
    convertSignature(item) {
        let parameters = item.parameters.map(p => {
            return {
                label: Previewer.plain(p.displayParts),
                documentation: Previewer.markdownDocumentation(p.documentation, [])
            };
        });
        let label = Previewer.plain(item.prefixDisplayParts);
        label += parameters.map(parameter => parameter.label).join(Previewer.plain(item.separatorDisplayParts));
        label += Previewer.plain(item.suffixDisplayParts);
        return {
            label,
            documentation: Previewer.markdownDocumentation(item.documentation, item.tags.filter(x => x.name !== 'param')),
            parameters
        };
    }
}
TypeScriptSignatureHelpProvider.triggerCharacters = ['(', ',', '<'];
exports.default = TypeScriptSignatureHelpProvider;
//# sourceMappingURL=signatureHelp.js.map