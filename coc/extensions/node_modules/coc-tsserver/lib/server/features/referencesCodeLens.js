"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const PConst = tslib_1.__importStar(require("../protocol.const"));
const typeConverters = tslib_1.__importStar(require("../utils/typeConverters"));
const baseCodeLensProvider_1 = require("./baseCodeLensProvider");
class TypeScriptReferencesCodeLensProvider extends baseCodeLensProvider_1.TypeScriptBaseCodeLensProvider {
    resolveCodeLens(codeLens, token) {
        let { uri } = codeLens.data;
        let filepath = this.client.toPath(uri);
        const args = typeConverters.Position.toFileLocationRequestArgs(filepath, codeLens.range.start);
        return this.client
            .execute('references', args, token)
            .then(response => {
            if (!response || !response.body) {
                throw codeLens;
            }
            const locations = response.body.refs
                .map(reference => typeConverters.Location.fromTextSpan(this.client.toResource(reference.file), reference))
                .filter(location => 
            // Exclude original definition from references
            !(location.uri.toString() === uri &&
                location.range.start.line === codeLens.range.start.line &&
                location.range.start.character ===
                    codeLens.range.start.character));
            codeLens.command = {
                title: locations.length === 1 ? '1 reference' : `${locations.length} references`,
                command: locations.length ? 'editor.action.showReferences' : '',
                arguments: [uri, codeLens.range.start, locations]
            };
            return codeLens;
        })
            .catch(() => {
            codeLens.command = {
                title: '0 references',
                command: ''
            };
            return codeLens;
        });
    }
    extractSymbol(document, item, parent) {
        if (parent && parent.kind === PConst.Kind.enum) {
            return super.getSymbolRange(document, item);
        }
        switch (item.kind) {
            case PConst.Kind.const:
            case PConst.Kind.let:
            case PConst.Kind.variable:
            case PConst.Kind.function:
                // Only show references for exported variables
                if (!item.kindModifiers.match(/\bexport\b/)) {
                    break;
                }
            // fallthrough
            case PConst.Kind.class:
                if (item.text === '<class>') {
                    break;
                }
            // fallthrough
            case PConst.Kind.memberFunction:
            case PConst.Kind.memberVariable:
            case PConst.Kind.memberGetAccessor:
            case PConst.Kind.memberSetAccessor:
            case PConst.Kind.constructorImplementation:
            case PConst.Kind.interface:
            case PConst.Kind.type:
            case PConst.Kind.enum:
                return super.getSymbolRange(document, item);
        }
        return null;
    }
}
exports.default = TypeScriptReferencesCodeLensProvider;
//# sourceMappingURL=referencesCodeLens.js.map